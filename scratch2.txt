# all the imports
import os
import sqlite3
from flask import Flask, request, session, g, redirect, url_for, abort, \
     render_template, flash

def create_app(config=None):
    app = Flask('flaskr') # create the application instance :)

    app.config.update(dict(
        DATABASE=os.path.join(app.root_path, 'flaskr.db'),
        DEBUG=True,
        SECRET_KEY=b'_5#y2L"F4Q8z\n\xec]/',
        USERNAME='admin',
        PASSWORD='default'
    ))

    app.config.update(config or {})
    app.config.from_envvar('FLASKR_SETTINGS', silent=True)

    #register_blueprints(app)
    #register_cli(app)
    register_teardowns(app)

    return app

#def register_blueprints(app):
#    """Register all blueprint modules
#    Reference: Armin Ronacher, "Flask for Fun and for Profit" PyBay 2016.
#    """
#    for name in find_modules('flaskr.blueprints'):
#        mod = import_string(name)
#        if hasattr(mod, 'bp'):
#            app.register_blueprint(mod.bp)
#    return None

#def register_cli(app):
#    @app.cli.command('initdb')
#    def initdb_command():
#        """Creates the database tables."""
#        init_db()
#        print('Initialized the database.')

def register_teardowns(app):
    @app.teardown_appcontext
    def close_db(error):
        """Closes the database again at the end of the request."""
        if hasattr(g, 'sqlite_db'):
            g.sqlite_db.close()

#app.config.from_object(__name__) # load config from this file , flaskr.py

# Load default config and override config from an environment variable
#app.config.update(dict(
#    DATABASE=os.path.join(app.root_path, 'flaskr.db'),
#    SECRET_KEY='development key something something difficult',
#    USERNAME='admin',
#    PASSWORD='default'
#))
#app.config.from_envvar('FLASKR_SETTINGS', silent=True)

def connect_db():
    """Connects to the specific database."""
    rv = sqlite3.connect(app.config['DATABASE'])
    rv.row_factory = sqlite3.Row
    return rv

def init_db():
    db = get_db()
    with app.open_resource('schema.sql', mode='r') as f:
        db.cursor().executescript(f.read())
    db.commit()

@app.cli.command('initdb')
def initdb_command():
    """Initializes the database."""
    init_db()
    print('Initialized the database.')

#def get_db():
#    """Opens a new database connection if there is none yet for the
#    current application context.
#    """
#    if not hasattr(g, 'sqlite_db'):
#        g.sqlite_db = connect_db()
#    return g.sqlite_db

#@app.teardown_appcontext
#def close_db(error):
#    """Closes the database again at the end of the request."""
#    if hasattr(g, 'sqlite_db'):
#        g.sqlite_db.close()
